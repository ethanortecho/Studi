name: Deploy Django App

on:
  # Deploy to staging on pull requests
  pull_request:
    branches: [main]
    paths: ['backend/**']
  
  # Deploy to production on push to main
  push:
    branches: [main]
    paths: ['backend/**']

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_studi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run Django tests
      env:
        DJANGO_SETTINGS_MODULE: studi.settings.development
        PGDATABASE: test_studi
        PGUSER: postgres
        PGPASSWORD: postgres
        PGHOST: localhost
        PGPORT: 5432
      run: |
        cd backend
        python manage.py test

  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render Staging
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
      run: |
        echo "Testing different API formats..."
        
        echo "1. Trying with no body:"
        response1=$(curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -w "\nHTTP_CODE:%{http_code}" -s)
        echo "Response1: $response1"
        
        echo "2. Trying with empty JSON:"
        response2=$(curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{}' \
          -w "\nHTTP_CODE:%{http_code}" -s)
        echo "Response2: $response2"
        
        echo "3. Trying clearCache only:"
        response3=$(curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"clearCache":false}' \
          -w "\nHTTP_CODE:%{http_code}" -s)
        echo "Response3: $response3"
        
        # Check if any worked
        if echo "$response1$response2$response3" | grep -q "HTTP_CODE:2"; then
          echo "‚úÖ Staging deployment triggered successfully"
        else
          echo "‚ùå All deployment attempts failed"
          exit 1
        fi
          
    - name: Comment PR with staging URL
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Staging deployment triggered! Check your Render dashboard for status.'
          })

  deploy-production:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render Production
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
      run: |
        echo "Triggering deployment for service: $RENDER_SERVICE_ID"
        response=$(curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"serviceId\":\"$RENDER_SERVICE_ID\",\"clearCache\":false}" \
          -w "\nHTTP_CODE:%{http_code}")
        echo "Response: $response"
        if echo "$response" | grep -q "HTTP_CODE:2"; then
          echo "‚úÖ Production deployment triggered successfully"
        else
          echo "‚ùå Production deployment failed"
          exit 1
        fi